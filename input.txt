import subprocess
import platform
import os

def record_screen_and_audio(output_file="recording.mp4", duration=10, framerate=30):
    # Detect operating system
    system = platform.system().lower()

    # Set input sources for macOS (you can customize based on your `ffmpeg -list_devices true -f avfoundation -i ""` output)
    if "darwin" in system:  # macOS
        video_input = "1"  # Screen input (use 1 for the main display on macOS)
        audio_input = ":0"  # Default audio input (microphone)
        command = [
            "ffmpeg",
            "-f", "avfoundation",             # Use avfoundation for macOS
            "-framerate", str(framerate),     # Set frame rate
            "-i", f"{video_input}{audio_input}",  # Combine screen and audio inputs
            "-t", str(duration),              # Duration in seconds
            "-preset", "ultrafast",           # Faster encoding preset
            output_file                       # Output file
        ]

    # Set input sources for Windows (DirectShow)
    elif "windows" in system:
        video_input = "video=screen-capture-recorder"
        audio_input = "audio=Microphone"
        command = [
            "ffmpeg",
            "-f", "dshow",                   # Use dshow for Windows
            "-i", f"{video_input}:{audio_input}",  # Combine screen and audio inputs
            "-t", str(duration),            # Duration in seconds
            "-preset", "ultrafast",         # Faster encoding preset
            output_file                     # Output file
        ]

    # Set input sources for Linux (X11 screen and PulseAudio)
    elif "linux" in system:
        screen_input = ":0.0+0,0"
        audio_input = "default"
        command = [
            "ffmpeg",
            "-f", "x11grab",                 # Use x11grab for screen capture
            "-i", screen_input,              # Screen input
            "-f", "pulse",                   # Use PulseAudio for audio
            "-i", audio_input,               # Audio input
            "-t", str(duration),             # Duration in seconds
            "-preset", "ultrafast",          # Faster encoding preset
            output_file                      # Output file
        ]

    else:
        raise Exception("Unsupported OS")

    # Execute the FFmpeg command
    print(f"Running command: {' '.join(command)}")
    subprocess.run(command)

# Call the function
record_screen_and_audio(output_file="screen_audio_recording.mp4", duration=10, framerate=30)
