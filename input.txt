from playwright.sync_api import sync_playwright
import json

def generate_locator(element):
    element_id = element.get_attribute("id")
    element_class = element.get_attribute("class")
    tag_name = element.evaluate("el => el.tagName.toLowerCase()")
    if element_id:
        locator = f"#{element_id}"
    elif element_class:
        first_class = element_class.split()
        locator = f"{tag_name}.{first_class}"
    else:
        locator = tag_name
    return locator

def extract_interactive_locators(page):
    interactive_elements = {}
    selector_map = [
        {"type": "button", "selector": "button"},
        {"type": "link", "selector": "a[href]"},
        {"type": "input", "selector": "input"},
        {"type": "textarea", "selector": "textarea"},
        {"type": "select", "selector": "select"},
        {"type": "checkbox", "selector": "input[type='checkbox']"},
        {"type": "radio", "selector": "input[type='radio']"},
    ]
    for item in selector_map:
        elements = page.query_selector_all(item["selector"])
        for el in elements:
            locator = generate_locator(el)
            name = (el.text_content() or "").strip()
            # Ignore elements with empty locator or name
            if locator and name:
                # If duplicate keys, could add a suffix or skip
                if name not in interactive_elements:
                    interactive_elements[name] = {
                        "type": item["type"],
                        "locator": locator
                    }
    return interactive_elements

def main(url, output_file='interactive_elements.json'):
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        page.goto(url)
        interactive_elements = extract_interactive_locators(page)
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(interactive_elements, f, ensure_ascii=False, indent=2)
        browser.close()

# Example usage:
# main('https://www.example.com', 'output.json')



#type script version

import { chromium, Page } from 'playwright';
import * as fs from 'fs';

function generateLocator(element: Element): string {
  const elementId = element.getAttribute('id');
  const elementClass = element.getAttribute('class');
  const tagName = element.tagName.toLowerCase();
  if (elementId) {
    return `#${elementId}`;
  } else if (elementClass) {
    const firstClass = elementClass.split(' ');
    return `${tagName}.${firstClass}`;
  } else {
    return tagName;
  }
}

async function extractInteractiveLocators(page: Page): Promise<Record<string, { type: string, locator: string }>> {
  const selectorMap = [
    { type: 'button', selector: 'button' },
    { type: 'link', selector: 'a[href]' },
    { type: 'input', selector: 'input' },
    { type: 'textarea', selector: 'textarea' },
    { type: 'select', selector: 'select' },
    { type: 'checkbox', selector: 'input[type="checkbox"]' },
    { type: 'radio', selector: 'input[type="radio"]' }
  ];
  const interactiveElements: Record<string, { type: string, locator: string }> = {};

  for (const item of selectorMap) {
    const elements = await page.$$(item.selector);

    for (const elHandle of elements) {
      const locator = await elHandle.evaluate(generateLocator);
      const name = (await elHandle.textContent())?.trim() ?? '';

      // Only include if both name and locator are non-empty and name is unique
      if (locator && name && !(name in interactiveElements)) {
        interactiveElements[name] = {
          type: item.type,
          locator
        };
      }
    }
  }
  return interactiveElements;
}

(async () => {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();
  await page.goto('https://www.example.com');

  const interactiveElements = await extractInteractiveLocators(page);

  fs.writeFileSync('interactive_elements.json', JSON.stringify(interactiveElements, null, 2), 'utf-8');

  await browser.close();
})();

