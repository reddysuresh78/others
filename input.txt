import base64
import os
from cryptography.fernet import Fernet
from hashlib import pbkdf2_hmac

# ðŸ”¹ Step 1: Convert Plain Text Key into a Secure Encryption Key
def derive_key(plain_text_key: str, salt: bytes = b"static_salt"):
    key = pbkdf2_hmac(
        hash_name="sha256",  # Hashing algorithm
        password=plain_text_key.encode(),  # Convert plain text key to bytes
        salt=salt,  # Use a static or randomly generated salt
        iterations=100000,  # Increase to make brute-force harder
        dklen=32,  # AES key size (32 bytes)
    )
    return base64.urlsafe_b64encode(key)  # Encode for Fernet compatibility

# ðŸ”¹ Step 2: Encrypt the Password
def encrypt_password(password: str, plain_text_key: str) -> bytes:
    key = derive_key(plain_text_key)
    fernet = Fernet(key)
    return fernet.encrypt(password.encode())

# ðŸ”¹ Step 3: Decrypt the Password
def decrypt_password(encrypted_password: bytes, plain_text_key: str) -> str:
    key = derive_key(plain_text_key)
    fernet = Fernet(key)
    return fernet.decrypt(encrypted_password).decode()

# ðŸ”¹ Example Usage
if __name__ == "__main__":
    user_defined_key = "mykey"  # Your plain text encryption key
    password = "MySuperSecretPassword123!"

    # Encrypt the password
    encrypted = encrypt_password(password, user_defined_key)
    print(f"Encrypted: {encrypted}")

    # Decrypt the password
    decrypted = decrypt_password(encrypted, user_defined_key)
    print(f"Decrypted: {decrypted}")
