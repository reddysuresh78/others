import asyncio
from playwright.async_api import async_playwright
import base64

# Callback function for when a user clicks on the page
async def on_click(source, url, screenshot):
    print(f"Click event captured on URL: {url}")
    with open(f"click_screenshot.png", "wb") as f:
        f.write(base64.b64decode(screenshot))

# Callback function for when a user types on the page
async def on_input(source, selector, value, screenshot):
    print(f"User typed '{value}' in element with selector: {selector}")
    with open(f"input_screenshot.png", "wb") as f:
        f.write(base64.b64decode(screenshot))

# Callback function for page navigations
async def on_navigation(url, screenshot):
    print(f"User navigated to: {url}")
    # with open(f"navigation_screenshot.png", "wb") as f:
    #     f.write(base64.b64decode(screenshot))

# Main function
async def main():
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)  # Set headless=True for no UI
        context = await browser.new_context()

        # Use context.expose_binding instead of page.expose_function
        await context.expose_binding("on_click", on_click)
        await context.expose_binding("on_input", on_input)
        
        # Listen for new pages (tabs, popups, etc.)
        context.on("page", lambda page: asyncio.create_task(setup_page_event_listeners(page)))

        # Open a new page
        page = await context.new_page()
        await page.goto("https://wellsfargo.com")

        # Attach listeners for clicks, input, and navigation
        await setup_page_event_listeners(page)

        print("Browser is running. Interact with the page.")
        await asyncio.sleep(300)  # Wait for user interaction (5 minutes)
        await browser.close()

# This function attaches event listeners to a specific page
async def setup_page_event_listeners(page):
    # Click event listener
    await page.evaluate("""
        document.addEventListener('click', async event => {
            const screenshot = await window.page.screenshot({ fullPage: false });
            const base64Image = btoa(new Uint8Array(screenshot).reduce((data, byte) => data + String.fromCharCode(byte), ''));
            window.on_click(window.location.href, base64Image);
        });
    """)

    # Input event listener
    await page.evaluate("""
        document.addEventListener('input', async event => {
            const target = event.target;
            if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
                const screenshot = await window.page.screenshot({ fullPage: false });
                const base64Image = btoa(new Uint8Array(screenshot).reduce((data, byte) => data + String.fromCharCode(byte), ''));
                window.on_input(target.tagName, target.value, base64Image);
            }
        });
    """)

    # Request and navigation events
    page.on('framenavigated', lambda frame: asyncio.create_task(handle_navigation(frame)))

    print(f"Listeners attached to page: {page.url}")

async def handle_navigation(frame):
    screenshot = await frame.page.screenshot(full_page=True)
    screenshot_base64 = base64.b64encode(screenshot).decode('utf-8')
    await on_navigation(frame.url, screenshot_base64)

# Run the script
asyncio.run(main())
