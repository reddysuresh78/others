
# Create a new project that uses langgraph. I need a graph that uses planner based on prior knowledge provided as an input. Then it delegates the actual execution to executor agent.  the executor agent delegates processing to 4 other agents. agent 1 understands the source code and generates pseudo code based on cobol code. Second agent generates java code based on the cobol code. third agent does the code review and provides comments. If there are any comments, the executor then calls code fixer agent to fix them. Once the code is fixed, it goes back to reviewer agent. This loop between code reviewer and fixer continues until there are no more review comments. Finally the executor summarizes what did and finishes the task.

import os
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, END

# Prompts for each agent
PLANNER_PROMPT = """You are a software migration planner.
Given the prior knowledge and the migration task, create a step-by-step plan.
Prior knowledge:
{prior_knowledge}

Task:
{task}

Output the plan as a numbered list.
"""

PSEUDOCODE_PROMPT = """You are a COBOL-to-pseudocode converter.
Given this COBOL code, generate clear, concise pseudocode.

COBOL code:
{cobol_code}
"""

JAVA_PROMPT = """You are a COBOL-to-Java code generator.
Given this COBOL code, generate equivalent Java code.

COBOL code:
{cobol_code}
"""

REVIEW_PROMPT = """You are a senior Java code reviewer.
Review the following Java code and provide a list of comments for improvements or issues.
If there are no issues, respond with "No comments".

Java code:
{java_code}
"""

FIX_PROMPT = """You are a Java code fixer.
Given the Java code and the review comments, fix the code accordingly.
If there are no comments, return the code unchanged.

Java code:
{java_code}

Review comments:
{review_comments}
"""

SUMMARY_PROMPT = """You are a summarizer.
Summarize the migration process and the main changes made.

Plan:
{plan}

Final Java code:
{java_code}

Review/fix history:
{history}
"""

# Agent functions
def planner_agent(state):
    llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)
    plan = llm.invoke(PLANNER_PROMPT.format(
        prior_knowledge=state["prior_knowledge"],
        task=state["task"]
    )).content
    state["plan"] = plan
    return state

def pseudocode_agent(state):
    llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)
    pseudocode = llm.invoke(PSEUDOCODE_PROMPT.format(
        cobol_code=state["cobol_code"]
    )).content
    state["pseudocode"] = pseudocode
    return state

def java_agent(state):
    llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)
    java_code = llm.invoke(JAVA_PROMPT.format(
        cobol_code=state["cobol_code"]
    )).content
    state["java_code"] = java_code
    return state

def reviewer_agent(state):
    llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)
    comments = llm.invoke(REVIEW_PROMPT.format(
        java_code=state["java_code"]
    )).content
    state["review_comments"] = comments
    return state

def fixer_agent(state):
    llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)
    fixed_code = llm.invoke(FIX_PROMPT.format(
        java_code=state["java_code"],
        review_comments=state["review_comments"]
    )).content
    # Save history for summary
    if "history" not in state:
        state["history"] = []
    state["history"].append({
        "code": state["java_code"],
        "comments": state["review_comments"]
    })
    state["java_code"] = fixed_code
    return state

def summary_agent(state):
    llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)
    summary = llm.invoke(SUMMARY_PROMPT.format(
        plan=state["plan"],
        java_code=state["java_code"],
        history=state.get("history", [])
    )).content
    state["summary"] = summary
    return state

# Executor node logic: runs pseudocode, java, reviewer, fixer loop
def executor_node(state):
    # Step 1: Pseudocode
    state = pseudocode_agent(state)
    # Step 2: Java code
    state = java_agent(state)
    # Step 3: Review/fix loop
    max_loops = 5
    for _ in range(max_loops):
        state = reviewer_agent(state)
        if "no comments" in state["review_comments"].lower():
            break
        state = fixer_agent(state)
    return state

# Build the graph
def build_graph():
    workflow = StateGraph()
    workflow.add_node("planner", planner_agent)
    workflow.add_node("executor", executor_node)
    workflow.add_node("summary", summary_agent)
    workflow.add_edge("planner", "executor")
    workflow.add_edge("executor", "summary")
    workflow.add_edge("summary", END)
    workflow.set_entry_point("planner")
    return workflow.compile()

# Entrypoint for running the workflow
def run_workflow(prior_knowledge, cobol_code, task):
    graph = build_graph()
    state = {
        "prior_knowledge": prior_knowledge,
        "cobol_code": cobol_code,
        "task": task
    }
    result = graph.invoke(state)
    return result

if __name__ == "__main__":
    # Example usage (see example_usage.py for a full example)
    pk = "COBOL code uses fixed format. Java migration should follow OOP best practices."
    cobol = "IDENTIFICATION DIVISION. PROGRAM-ID. HELLO. PROCEDURE DIVISION. DISPLAY 'HELLO, WORLD!'."
    task = "Migrate this COBOL program to Java."
    output = run_workflow(pk, cobol, task)
    print("Summary:\n", output["summary"])
    print("\nFinal Java code:\n", output["java_code"])
    
    
    
    from main import run_workflow

if __name__ == "__main__":
    prior_knowledge = """
- COBOL code uses fixed-format structure.
- Java migration should use classes and methods.
- Error handling in Java should use exceptions.
"""
    cobol_code = """
IDENTIFICATION DIVISION.
PROGRAM-ID. ADDER.
DATA DIVISION.
WORKING-STORAGE SECTION.
01 NUM1 PIC 9(2).
01 NUM2 PIC 9(2).
01 SUM  PIC 9(3).
PROCEDURE DIVISION.
    MOVE 10 TO NUM1.
    MOVE 20 TO NUM2.
    ADD NUM1 TO NUM2 GIVING SUM.
    DISPLAY 'SUM IS ' SUM.
    STOP RUN.
"""
    task = "Migrate this COBOL program to Java."

    result = run_workflow(prior_knowledge, cobol_code, task)

    print("=== Migration Summary ===")
    print(result["summary"])
    print("\n=== Final Java Code ===")
    print(result["java_code"])
    print("\n=== Review/Fix History ===")
    for i, step in enumerate(result.get("history", [])):
        print(f"\n--- Iteration {i+1} ---")
        print("Comments:", step["comments"])
        print("Code:\n", step["code"])
