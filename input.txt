import autogen

from autogen.agentchat.contrib.web_surfer import WebSurferAgent

llm_config = {
    "timeout": 600,
    "cache_seed": 42,
    "config_list": autogen.config_list_from_json(
        "OAI_CONFIG_LIST.json"),
    "temperature": 0,
}

summarizer_llm_config = {
    "timeout": 600,
    "cache_seed": None,
    "config_list": autogen.config_list_from_json(
        "OAI_CONFIG_LIST.json"),
    "temperature": 0,
}

web_surfer = WebSurferAgent(
    "web_surfer",
    llm_config=llm_config,
    summarizer_llm_config=summarizer_llm_config,
    browser_config={"viewport_size": 4096},
)

user_proxy = autogen.UserProxyAgent(
    "user_proxy",
    human_input_mode="NEVER",
    code_execution_config=False,
    default_auto_reply="",
    is_termination_msg=lambda x: True,
)

# task1 = """
# Search the web for information about Microsoft AutoGen
# """
# user_proxy.initiate_chat(web_surfer, message=task1)
# task2 = "Summarize these results"
# user_proxy.initiate_chat(web_surfer, message=task2, clear_history=False)
# task3 = "Click the 'Getting Started' result"
# user_proxy.initiate_chat(web_surfer, message=task3, clear_history=False)


task4 = """Find Microsoft's Wikipedia page."""
user_proxy.initiate_chat(web_surfer, message=task4, clear_history=False)
task5 = """Scroll down."""
user_proxy.initiate_chat(web_surfer, message=task5, clear_history=False)
task6 = """Where is there total revenue?"""
user_proxy.initiate_chat(web_surfer, message=task6, clear_history=False)





import http.server
import socketserver
import socket
import requests

# Configuration for the upstream proxy
UPSTREAM_PROXY = "http://upstream-proxy:8080"

class ProxyHTTPRequestHandler(http.server.BaseHTTPRequestHandler):
    def do_CONNECT(self):
        """
        Handle CONNECT requests to establish an HTTPS tunnel through the upstream proxy.
        """
        try:
            # Forward CONNECT requests to the upstream proxy
            with socket.create_connection((UPSTREAM_PROXY.split(":")[1][2:], int(UPSTREAM_PROXY.split(":")[2]))) as proxy_socket:
                self.send_response(200)
                self.end_headers()

                # Relay the request to the upstream proxy
                proxy_socket.sendall(f"CONNECT {self.path} HTTP/1.1\r\nHost: {self.path}\r\n\r\n".encode())
                # Forward data between the client and the upstream proxy
                self._forward_data(self.connection, proxy_socket)
        except Exception as e:
            self.send_error(500, f"Error establishing CONNECT tunnel: {e}")

    def _forward_data(self, client_socket, upstream_socket):
        """
        Forward data between client and upstream proxy or destination.
        """
        sockets = [client_socket, upstream_socket]
        while True:
            readable, _, _ = select.select(sockets, [], sockets)
            for sock in readable:
                data = sock.recv(4096)
                if not data:
                    return
                # Send the data to the other socket
                if sock is client_socket:
                    upstream_socket.sendall(data)
                else:
                    client_socket.sendall(data)

    def handle_request(self):
        """
        Handle regular HTTP/HTTPS requests through the upstream proxy.
        """
        # Construct the target URL
        target_url = f"http://{self.headers['Host']}{self.path}"

        # Extract headers and body from the client request
        headers = {key: value for key, value in self.headers.items()}
        content_length = int(self.headers.get('Content-Length', 0))
        body = self.rfile.read(content_length) if content_length > 0 else None

        # Log the request body
        if body:
            print(f"Request Body for {self.command} {self.path}:\n{body.decode('utf-8', errors='replace')}")

        # Forward the request to the destination via the upstream proxy
        try:
            response = self.forward_to_upstream_proxy(target_url, headers, body)
            self.send_response_to_client(response)
        except Exception as e:
            self.send_error(500, f"Internal server error: {e}")

    def forward_to_upstream_proxy(self, url, headers, body):
        """
        Forward the intercepted request to the destination via the upstream proxy.
        """
        proxies = {"http": UPSTREAM_PROXY, "https": UPSTREAM_PROXY}
        method = self.command
        if method == "GET":
            return requests.get(url, headers=headers, proxies=proxies)
        elif method == "POST":
            return requests.post(url, headers=headers, data=body, proxies=proxies)
        elif method == "PUT":
            return requests.put(url, headers=headers, data=body, proxies=proxies)
        elif method == "DELETE":
            return requests.delete(url, headers=headers, data=body, proxies=proxies)
        elif method == "HEAD":
            return requests.head(url, headers=headers, proxies=proxies)
        elif method == "OPTIONS":
            return requests.options(url, headers=headers, proxies=proxies)
        elif method == "PATCH":
            return requests.patch(url, headers=headers, data=body, proxies=proxies)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")

    def send_response_to_client(self, response):
        """
        Forward the response back to the client.
        """
        # Send the status code
        self.send_response(response.status_code)

        # Send headers
        for key, value in response.headers.items():
            self.send_header(key, value)
        self.end_headers()

        # Send the body
        self.wfile.write(response.content)

    # Handle HTTP methods
    def do_GET(self):
        self.handle_request()

    def do_POST(self):
        self.handle_request()

    def do_PUT(self):
        self.handle_request()

    def do_DELETE(self):
        self.handle_request()

    def do_HEAD(self):
        self.handle_request()

    def do_OPTIONS(self):
        self.handle_request()

    def do_PATCH(self):
        self.handle_request()


# Start the proxy server
def run_proxy(port=8080):
    with socketserver.ThreadingTCPServer(("", port), ProxyHTTPRequestHandler) as httpd:
        print(f"Serving proxy on port {port}, forwarding via {UPSTREAM_PROXY}")
        httpd.serve_forever()


if __name__ == "__main__":
    import select
    run_proxy()
