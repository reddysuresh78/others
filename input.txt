pip install jira pandas

from jira import JIRA
import pandas as pd
from datetime import datetime

# Authenticate with Jira
jira = JIRA(
    server='https://your-jira-instance.atlassian.net',
    basic_auth=('your-email@example.com', 'your-api-token')
)

# JQL for features released after June 2024
jql_query = "project = YOUR_PROJECT AND issuetype = Feature AND fixVersion >= '2024-07-01' ORDER BY created DESC"

features = jira.search_issues(jql_query, expand='changelog', maxResults=1000)

data = []

for feature in features:
    feature_id = feature.key
    feature_labels = feature.fields.labels
    feature_has_hrf = 'HRF' in feature_labels

    # Default values
    feature_hrf_date = None

    # Check changelog for HRF label addition on the feature
    for history in feature.changelog.histories:
        for item in history.items:
            if item.field == 'labels' and 'HRF' in item.toString.split(','):
                feature_hrf_date = history.created
                break
        if feature_hrf_date:
            break

    # Find related stories (linked issues)
    related_issues = []
    for link in feature.fields.issuelinks:
        if hasattr(link, "outwardIssue"):
            related_issues.append(link.outwardIssue)
        elif hasattr(link, "inwardIssue"):
            related_issues.append(link.inwardIssue)

    for story in related_issues:
        if story.fields.issuetype.name.lower() not in ['story', 'task']:
            continue

        story_obj = jira.issue(story.key, expand='changelog')
        story_labels = story_obj.fields.labels
        story_has_hrf = 'HRF' in story_labels
        story_hrf_date = None
        fix_version = ', '.join([fv.name for fv in story_obj.fields.fixVersions]) if story_obj.fields.fixVersions else None

        for history in story_obj.changelog.histories:
            for item in history.items:
                if item.field == 'labels' and 'HRF' in item.toString.split(','):
                    story_hrf_date = history.created
                    break
            if story_hrf_date:
                break

        data.append({
            'FeatureId': feature_id,
            'Feature has HRF Label': feature_has_hrf,
            'Feature HRF label date': feature_hrf_date,
            'Story Id': story.key,
            'Story has HRF Label': story_has_hrf,
            'Story HRF label date': story_hrf_date,
            'Fixed Version': fix_version
        })

# Convert to DataFrame
df = pd.DataFrame(data)

# Save or display
print(df)
df.to_csv("jira_hrf_report.csv", index=False)
