from opentelemetry.sdk.trace.export import SpanProcessor, ReadableSpan
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry import trace
import redis
import json

class RedisPubSubSpanProcessor(SpanProcessor):
    def __init__(self, redis_channel, filter_fn=None, redis_host="localhost", redis_port=6379):
        self.redis_channel = redis_channel
        self.redis = redis.StrictRedis(host=redis_host, port=redis_port, db=0)
        self.filter_fn = filter_fn if filter_fn else lambda span: True

    def on_start(self, span: ReadableSpan, parent_context):
        pass  # No action on start

    def on_end(self, span: ReadableSpan):
        # Filter condition
        if self.filter_fn(span):
            # Convert the span data to a serializable dict
            data = {
                "name": span.name,
                "span_id": format(span.context.span_id, "016x"),
                "trace_id": format(span.context.trace_id, "032x"),
                "attributes": dict(span.attributes),
                "start_time": span.start_time,
                "end_time": span.end_time,
            }
            self.redis.publish(self.redis_channel, json.dumps(data))

    def shutdown(self):
        pass

    def force_flush(self, timeout_millis: int = 30000):
        pass





tracer_provider = TracerProvider()
trace.set_tracer_provider(tracer_provider)

# Example: Only export spans whose name starts with "MyChain"
def filter_fn(span):
    return span.name.startswith("MyChain")

tracer_provider.add_span_processor(
    RedisPubSubSpanProcessor(redis_channel="otel-spans", filter_fn=filter_fn)
)

# Now instrument OpenInference/LangChain as usual.
