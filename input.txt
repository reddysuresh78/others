Jim's weight plus Bob's weight is 200 pounds. If you subtract 171.43 â†’ 160 three times Jim's weight from Bob's weight, you get one-fourth of Bob's weight. Determine Bob's weight. Could the answer possibly be around 175?

```python
# Create server parameters for stdio connection
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

from langchain_mcp_adapters.tools import load_mcp_tools
from langgraph.prebuilt import create_react_agent

from langchain_openai import ChatOpenAI
import asyncio

model = ChatOpenAI(model="gpt-4o")


async def create_session(server_params: StdioServerParameters):
    """
    Creates and initializes a client session.

    Args:
        server_params: The StdioServerParameters object defining the connection to the server.

    Returns:
        A ClientSession object and the read/write streams.  Returns None, None if the connection fails.
    """
    try:
        read, write = await stdio_client(server_params).__aenter__()  # Open connection
        session = ClientSession(read, write)
        await session.initialize()  # Initialize the session
        return session, read, write
    except Exception as e:
        print(f"Error creating session: {e}")
        return None, None, None


async def close_session(session: ClientSession, read, write):
    """
    Closes a client session and the underlying streams.

    Args:
        session: The ClientSession object to close.
        read: The read stream to close.
        write: The write stream to close.
    """
    if session:
        await session.__aexit__(None, None, None)  # Close the session (important!)
    if read:
        await read.close()
    if write:
        await write.close()


async def run_agent(session: ClientSession, query: str):
    """
    Runs the agent using an existing ClientSession.

    Args:
        session: The ClientSession object to use.
        query: The query to be passed to the agent.

    Returns:
        The agent's response.
    """
    try:
        tools = await load_mcp_tools(session)
        agent = create_react_agent(model, tools)
        agent_response = await agent.ainvoke({"messages": query})
        return agent_response
    except Exception as e:
        print(f"Error running agent: {e}")
        return None


# Example Usage (outside the original block):
async def main():
    server_params = StdioServerParameters(
        command="python",
        # Make sure to update to the full absolute path to your math_server.py file
        args=["/path/to/math_server.py"],
    )

    session, read, write = await create_session(server_params)
    if session is None:
        print("Failed to create session.  Exiting.")
        return

    try:
        # Example 1
        query1 = "what's (3 + 5) x 12?"
        response1 = await run_agent(session, query1)
        print(f"Agent Response 1: {response1}")

        # Example 2 (another request using the same session)
        query2 = "what is 2 squared plus 3 squared?"
        response2 = await run_agent(session, query2)
        print(f"Agent Response 2: {response2}")

    finally:
        await close_session(session, read, write)  # Ensure the session is closed, even if errors occur.


if __name__ == "__main__":
    asyncio.run(main())
```
  
